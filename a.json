{
    "AWS_KEY": "AKIAJBSH7BNFMGC5ACAQ",
    "AWS_SECRET": "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"
}
identity henry.wang@citrix.com
    hostname sydlhenryw01.eng.citrite.net:1025
    username "henryw"
    password "<work_pass>"

mda "<procmail> -f %F -d %T"

{
  "Environment": {
    "GlobalData": {
      "SEND_MESSAGE_FROM": "#XenDesktop-Automation@citrite.net",
      "ONEREPORT_DATABASE_PASSWORD": "citrix",
      "MESSAGE_SUBJECT_HEAD": "",
      "MESSAGE_BODY_EMAIL": "Queries please contact",
      "VM_START_SPACING": 0,
      "ONEREPORT_DATABASE_SERVER": "10.8.110.73",
      "SMTP_MAIL_SERVER": "lonmail.citrite.net",
      "SEND_ADMIN_ADDRESS": "donald.bett@citrix.com",
      "CLEANUP_ON_START": true,
      "OBJECT_FILE": "lastrunobjects.tmp",
      "ONEREPORT_DATABASE_NAME": "Dashboard",
      "COMMAND_NAME_PARAM_FILE": "C:\\ASF\\tests\\LayoutBvts\\VdaServerTest\\XenDesktop-VdaServerTest_seq.xml",
      "PUBLISH_REPORT": true,
      "ONETEST_TOKEN": "9F1FD509-EAA1-4cc1-85F6-907B35E6AB44",
      "RSS_SUBMIT": false,
      "ONETEST_ENVIRONMENT_NAME": "",
      "PLANR_DOMAIN": "",
      "ONEREPORT_SUBMIT": false,
      "VDASERVER_INSTALL_REBOOT": "1,2,3",
      "PLANR_PASSWORD": "",
      "PUBLISH_REPORT_DESTINATION": "\\\\asfreports.eng.citrite.net\\asfreports\\Merlin\\LayoutBvts\\VdaServerTest",
      "ONETEST_SUBMIT": false,
      "RESULT_SUBMISSION_NAME": "None",
      "ENVIRONMENT_SEQUENCE": "C:\\ASF\\tests\\LayoutBvts\\VdaServerTest\\Prep-Environment_seq.xml",
      "SEND_MESSAGE_TO": "donald.bett@citrix.com",
      "ONETEST_TEMPLATE_ROOT_FOLDER": "Citrix Test Library",
      "PLANR_SUBMIT": false,
      "MESSAGE_BODY_REPORTS_LOC": "http:\\\\asfreports.eng.citrite.net\\asfreports\\Merlin\\LayoutBvts\\VdaServerTest",
      "VM_START_SCRIPT": "",
      "PLANR_USERNAME": "",
      "ONEREPORT_DATABASE_USERNAME": "TestAutomation",
      "PLANR_WEB_SERVICE": "http://solerabc.build.eng.citrite.net/PlanR/PlanRService.svc?wsdl",
      "PRE_ENVIRONMENT_SEQUENCE": "C:\\ASF\\environment\\env_pre_seq.xml",
      "POST_TEST_SEQUENCE": "C:\\ASF\\environment\\env_post_seq.xml",
      "PLANB_JOBID": "",
      "ONETEST_TEST_TASK_FOLDER_PATH": "Citrix - DNA,XenDesktop",
      "MESSAGE_BODY_RSS": "RSS: http://camdoxygen01.eng.citrite.net/cgi-bin/feed.rss?name=",
      "CLEANUP_ON_EXIT": false,
      "ONETEST_PROJECT_NAME": "Desktops and Applications [WP]",
      "PATH_TO_PUBLIC_SHARE": "C:\\ASF\\public",
      "LAST_BUILD_ID": "Arthur",
      "MESSAGE_DOCUMENTATION": "",
      "LOCAL_REPORTS_BASE_PATH": "Reports",
      "SEND_EMAIL": true,
      "ONETEST_BASEURI": "http://onetest.citrite.net/DevTestApi/api"
    },
    "Builds": [
      {
        "BuildNumber": "5027",
        "SyncDirs": true,
        "BuildId": "Arthur",
        "Subdirectories": [
          [
            "Extras\\Tools\\LACI"
          ],
          [
            "Image-Full"
          ]
        ],
        "BuildPath": "\\\\eng.citrite.net\\global\\layouts\\cds\\Arthur\\base\\5027",
        "ReportingName": "XenDesktop"
      }
    ],
    "Roles": [
      [
        {
          "Settings": {
            "TestConfig": "VdaServerTestConfig",
            "HostType": "AsfManaged",
            "Hostname": "Client_X",
            "TemplateName": "Win81.en_gb.x86.0.134f0fe4d",
            "InstanceType": ""
          },
          "Role": "CLIENT"
        }
      ],
      [
        {
          "Settings": {
            "TestConfig": "VdaServerTestConfig",
            "HostType": "AsfManaged",
            "Hostname": "DDC1_X",
            "TemplateName": "2012R2.en_gb.x64.201402139fba87",
            "InstanceType": ""
          },
          "Role": "DDC"
        }
      ],
      [
        {
          "Settings": {
            "TestConfig": "VdaServerTestConfig",
            "HostType": "AsfManaged",
            "Hostname": "VDA1-X2012",
            "TemplateName": "2012R2.en_gb.x64.201402139fba87",
            "InstanceType": ""
          },
          "Role": "VDAServer"
        }
      ]
    ],
    "Sequences": [
      {
        "Sequence": "C:\\ASF\\tests\\LayoutBvts\\VdaServerTest\\XenDesktop-VdaServerTest_seq.xml",
        "TestConfig": "VdaServerTestConfig"
      }
    ]
  },
  "Project": {
    "Name": "VdaServerTest",
    "File": "VdaServerTest.project.json",
    "Version": "2"
  },
  "TestManifest": [
    [
      {
        "SubPath": "Binaries",
        "BasePath": "\\\\eng.citrite.net\\global\\Builds\\Automation\\Tests\\XD",
        "ProtocolVersion": "2",
        "FilterPaths": "",
        "FullName": "\\\\eng.citrite.net\\global\\Builds\\Automation\\Tests\\XD\\arthur\\testapi",
        "LocalInstallPath": ".\\Tests\\testapi",
        "Library": "Tests",
        "Repository": "arthur",
        "Suite": "testapi",
        "Version": "49545"
      }
    ],
    [
      {
        "SubPath": "Binaries",
        "BasePath": "\\\\eng.citrite.net\\global\\Builds\\Automation\\Tests\\XD",
        "ProtocolVersion": "2",
        "FilterPaths": "",
        "FullName": "\\\\eng.citrite.net\\global\\Builds\\Automation\\Tests\\XD\\arthur\\layoutbvts",
        "LocalInstallPath": ".\\Tests\\layoutbvts",
        "Library": "Tests",
        "Repository": "arthur",
        "Suite": "layoutbvts",
        "Version": "49230"
      }
    ],
    [
      {
        "SubPath": "Binaries",
        "BasePath": "\\\\eng.citrite.net\\global\\Builds\\Automation\\Tests\\XD",
        "ProtocolVersion": "2",
        "FilterPaths": "",
        "FullName": "\\\\eng.citrite.net\\global\\Builds\\Automation\\Tests\\XD\\arthur\\common",
        "LocalInstallPath": ".\\Tests\\common",
        "Library": "Tests",
        "Repository": "arthur",
        "Suite": "common",
        "Version": "49343"
      }
    ]
  ]
}
Skip to content
 
Search or jump toâ€¦

Pull requests
Issues
Marketplace
Explore
 @0xdeadpool Sign out
0
0 0 duneding/elastic
 Code  Issues 0  Pull requests 0  Projects 0  Wiki  Insights
elastic/Tests/Providers/UnitTest.cs
d8cbaca  on 28 Feb 2015
@duneding duneding rock
      
755 lines (626 sloc)  28.3 KB
using System;
using System.Text;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using log4net;
using System.Xml.Linq;
using System.Linq;
using CDM.ElasticSearch.Providers.SSRS;
using CDM.ElasticSearch.Providers.OData;
using CDM.ElasticSearch.Providers.Tableau;
using System.Reflection;
using CDM.ElasticSearch.Providers.ICommon;
using UnitTest;
using CDM.ElasticSearch.Providers.Hyperion;
using CDM.ElasticSearch.Providers.Bicoe;
using CDM.ElasticSearch.Providers.Common;
using CDM.ElasticSearch.Providers.Citropedia;
using CDM.ElasticSearch.Providers.PowerPivot;


namespace CDM.ElasticSearch.UnitTest
{
    /// <summary>
    /// Summary description for TestScheduler
    /// </summary>
    [TestClass]
    public class TestProviders
    {
        private static readonly ILog logger = LogManager.GetLogger(typeof(TestProviders));                
        private const string HOST_ES_REMOTE = "ftldcdmapp01.citrite.net";
        private const string HOST_ES_LOCAL = "10.108.144.123";
        private const int PORT_ES_REMOTE = 9200;
        private const int PORT_ES_LOCAL = 9200;
        
        //ElasticSearch
        //private Engine engine = new Engine(HOST_ES_REMOTE, PORT_ES_REMOTE, 0);
        private Engine engine = new Engine(HOST_ES_LOCAL, PORT_ES_LOCAL, 0);        

        [TestMethod]
        public void testSSRSUpdate()
        {
            SSRSProvider provider = new SSRSProvider();        
            //var address = "http://ftlpssrslb:80/ReportServer/ReportService2010.asmx";
            //var address = "http://ftlqssrs02/ReportServer/ReportService2010.asmx";
            var address = "http://ftlqssrs03/ReportServer/ReportService2010.asmx";
            //var address = "http://ftlpssrslb/ReportServer/ReportService2010.asmx";        
            //var username = "t_leandrod1";
            //var password = "tellago*9";
            var username = "t_martinda";
            var password = "tellago*12";
            var index = "ssrs";
            provider.JobParameters = GetJobParameters(address, username, password, index);

            if (provider.Connect()) 
            {                
                provider.ElasticSearch = engine;
                Assert.IsTrue(provider.Update());
            }
        }

        [TestMethod]
        public void testConnectSSRS()
        {
            SSRSProvider provider = new SSRSProvider();
            var address = "http://ftlpssrslb:80/ReportServer/ReportService2010.asmx";
            var username = "t_leandrod1";
            var password = "tellago*9";
            var index = "ssrs";
            provider.JobParameters = GetJobParameters(address, username, password, index);

            Assert.IsTrue(provider.Connect());
        }

        [TestMethod]
        public void testConnectOData()
        {
            ODataProvider provider = new ODataProvider();
            var address = "http://service.citrite.net/entity/GenericOData/ods/mdmpartnercustomer";
            var username = "t_martinda";
            var password = "tellago*1";
            var index = "odata";
            provider.JobParameters = GetJobParameters(address, username, password, index);

            Assert.IsTrue(provider.Connect());
        }

        [TestMethod]
        public void testConnectODataWithUrl()
        {
            ODataProvider provider = new ODataProvider();            
            string address = "http://service.citrite.net/entity/GenericOData/ods/mdmpartnercustomer";
            var username = "t_leandrod1";
            var password = "tellago*9";
            var index = "odata";
            provider.JobParameters = GetJobParameters(address, username, password, index);

            Assert.IsTrue(provider.Connect());
        }

        [TestMethod]
        public void testConnectODataWithOtherUrl()
        {
            ODataProvider provider = new ODataProvider();
            string address = "http://service.citrite.net/entity/GenericOData/ods/mdmpartnersites";
            var username = "t_leandrod1";
            var password = "tellago*9";
            var index = "odata";
            provider.JobParameters = GetJobParameters(address, username, password, index);

            Assert.IsTrue(provider.Connect());
        }

        [TestMethod]
        public void testConnectTableauDev()
        {
            var provider = new TableauProvider();
            //var result = await rs.Login();
            var address = "tableau://ftldtablws02:8060/workgroup";            
            var username = "tableau";
            var password = "T@bl3@uDev";
            var index = "tableau";
            provider.JobParameters = GetJobParameters(address, username, password, index);

            Assert.IsTrue(provider.Connect());
        }

        [TestMethod]
        public void testConnectTableauPrd()
        {
            var provider = new TableauProvider();
            //var result = await rs.Login();
            var address = "tableau://ftlptablws01:8060/workgroup?webhost=ftlptableau";
            var username = "tableau";
            var password = "T@bl3@u";
            var index = "tableau";
            provider.JobParameters = GetJobParameters(address, username, password, index);

            Assert.IsTrue(provider.Connect());
        }

        [TestMethod]
        public void testConnectTableauQA()
        {
            var provider = new TableauProvider();                      
            var address = "tableau://ftlqtablws03:8060/workgroup";            
            var username = "tableau";
            var password = "T@bl3@uDev";
            var index = "tableau";
            provider.JobParameters = GetJobParameters(address, username, password, index);

            Assert.IsTrue(provider.Connect());
        }
        
        [TestMethod]
        public void testConnectTableauPSSQL()
        {
            var provider = new TableauProvider();
            var address = "tableau://ftlptablws01:8060/workgroup?webhost=ftlptableau";
            var username = "tableau";
            var password = "T@bl3@uDev";
            var index = "tableau";
            provider.JobParameters = GetJobParameters(address, username, password, index);

            Assert.IsTrue(provider.Connect());
        }

        /*[TestMethod]
        public void testGetResourceTableau()
        {
            var provider = new TableauProvider();
            //var address = "http://ftlqtableau";
            //var address = "tableau://ftldtablws02:8060/workgroup";
            var address = "tableau://ftlqtableau.citrite.net:8060/workgroup";
            var username = "t_leandrod1";
            var password = "tellago*9";
            var index = "tableau";
            provider.JobParameters = GetJobParameters(address, username, password, index);
            provider.Connect();
            var res = provider.GetResource("views.xml");
            Assert.IsTrue(res!=null);
        }*/

        [TestMethod]
        public void testODataUpdate()
        {            
            ODataProvider provider = new ODataProvider();
            string address = "http://service.citrite.net/entity/GenericOData/ods/mdmpartnercustomer/$metadata";

            provider.ElasticSearch = engine;
            var username = "t_leandrod1";
            var password = "tellago*9";
            var index = "odata";
            provider.JobParameters = GetJobParameters(address, username, password, index);

            if (provider.Connect())
                Assert.IsTrue(provider.Update());
        }

        [TestMethod]
        public void testODataUpdateOtherDS()
        {
            ODataProvider provider = new ODataProvider();
            string address = "http://service.citrite.net/entity/GenericOData/ods/mdmpartnersites/$metadata";                        
            provider.ElasticSearch = engine;
            var username = "t_leandrod1";
            var password = "tellago*9";
            var index = "odata";
            provider.JobParameters = GetJobParameters(address, username, password, index);

            if (provider.Connect())
                Assert.IsTrue(provider.Update());
        }

        [TestMethod]
        public void testTableauUpdate()
        {
            TableauProvider provider = new TableauProvider();            

            var address = "tableau://ftldtablws02:8060/workgroup";
            var username = "tableau";
            var password = "T@bl3@uDev";
            var index = "tableau";
            provider.JobParameters = GetJobParameters(address, username, password, index);
            provider.ElasticSearch = engine;

            if (provider.Connect())
                Assert.IsTrue(provider.Update());
        }

        [TestMethod]
        public void testTableauUpdateQA()
        {
            TableauProvider provider = new TableauProvider();            

            var address = "tableau://ftlqtablws03:8060/workgroup?webhost=ftlqtableau";            
            var username = "tableau";
            var password = "T@bl3@uDev";
            var index = "tableau";
            provider.JobParameters = GetJobParameters(address, username, password, index);            
            provider.ElasticSearch = engine;

            if (provider.Connect())
                Assert.IsTrue(provider.Update());
        }

        [TestMethod]
        public void testTableauUpdatePRD()
        {
            TableauProvider provider = new TableauProvider();            

            var address = "tableau://ftlptablws01:8060/workgroup?webhost=ftlptableau";
            var username = "tableau";
            var password = "T@bl3@u";
            var index = "tableau";
            provider.JobParameters = GetJobParameters(address, username, password, index);            
            provider.ElasticSearch = engine;

            if (provider.Connect())
                Assert.IsTrue(provider.Update());
        }

        [TestMethod]
        public void testProvidersFromDB()
        {
            CDMEntities cdmContext;
            cdmContext = new CDMEntities();
            var db_Types = GetSourceTypes(cdmContext);
            var db_Sources = GetSources(cdmContext);

                foreach (var source in db_Sources.ToList())
                {
                    if (source.Type != 1)
                    {
                        var type = db_Types.ToList().Single(t => t.Id.Equals(source.Type));
                        Type typeProvider = Assembly.Load(type.Assembly).GetType(type.Class);
                        var provider = (CommonProvider)Activator.CreateInstance(typeProvider);
                        var address = source.Address;
                        var username = source.User;
                        var password = source.Password;

                        provider.JobParameters = GetJobParameters(address, username, password, "");            
                        //Connect to provider
                        var result = provider.Connect();
                    }
                }
                cdmContext.Dispose();                            
        }

        [TestMethod]
        public void testUpdateODSMDMCustomer()
        {
            ODataProvider provider = new ODataProvider();

            string address = "http://cecdvm456.citrite.net/ods/MDMCustomer";
            provider.ElasticSearch = engine;
            var username = "citrite\\t_leandrod1";
            var password = "tellago*9";
            var index = "mdmcustomer";
            provider.JobParameters = GetJobParameters(address, username, password, index);            
            provider.JobParameters.LastCrawled = DateTime.Now;

            provider.ElasticSearch = engine;

            Assert.IsTrue(provider.Connect());
            if (provider.Connect())
                Assert.IsTrue(provider.Update());
        }

        [TestMethod]
        public void testUpdateODSMDMPartner()
        {
            ODataProvider provider = new ODataProvider();

            string address = "http://cecdvm456.citrite.net/ods/MDMPARTNER";
            provider.ElasticSearch = engine;
            var username = "citrite\\t_leandrod1";
            var password = "tellago*9";
            var index = "mdmpartner";
            provider.JobParameters = GetJobParameters(address, username, password, index);
            provider.JobParameters.LastCrawled = DateTime.Now;

            provider.ElasticSearch = engine;

            Assert.IsTrue(provider.Connect());
            if (provider.Connect())
                Assert.IsTrue(provider.Update());
        }

        [TestMethod]
        public void testUpdateODSMDMParty()
        {
            ODataProvider provider = new ODataProvider();

            string address = "http://cecdvm456.citrite.net/ods/MDMPARTY";            
            provider.ElasticSearch = engine;
            var username = "citrite\\t_leandrod1";
            var password = "tellago*9";
            var index = "mdmparty";
            provider.JobParameters = GetJobParameters(address, username, password, index);
            provider.JobParameters.LastCrawled = DateTime.Now;

            provider.ElasticSearch = engine;

            Assert.IsTrue(provider.Connect());
            if (provider.Connect())
                Assert.IsTrue(provider.Update());
        }

        [TestMethod]
        public void testUpdateODSPacreportDB()
        {
            ODataProvider provider = new ODataProvider();

            string address = "http://cecdvm456.citrite.net/ods/PACReportDB";
            provider.ElasticSearch = engine;
            var username = "citrite\\t_leandrod1";
            var password = "tellago*9";
            var index = "pacreportdb";
            provider.JobParameters = GetJobParameters(address, username, password, index);
            provider.JobParameters.LastCrawled = DateTime.Now;

            provider.ElasticSearch = engine;

            Assert.IsTrue(provider.Connect());
            if (provider.Connect())
                Assert.IsTrue(provider.Update());
        }

        [TestMethod]
        public void testUpdateODSReplicaCads()
        {
            ODataProvider provider = new ODataProvider();

            string address = "http://cecdvm456.citrite.net/ods/ReplicaCADS";
            provider.ElasticSearch = engine;
            var username = "citrite\\t_leandrod1";
            var password = "tellago*9";
            var index = "replicacads";
            provider.JobParameters = GetJobParameters(address, username, password, index);
            provider.JobParameters.LastCrawled = DateTime.Now;

            provider.ElasticSearch = engine;

            Assert.IsTrue(provider.Connect());
            if (provider.Connect())
                Assert.IsTrue(provider.Update());
        }

        [TestMethod]
        public void testUpdateODSReplicaDuns()
        {
            ODataProvider provider = new ODataProvider();

            string address = "http://cecdvm456.citrite.net/ods/ReplicaDUNS";
            provider.ElasticSearch = engine;
            var username = "citrite\\t_leandrod1";
            var password = "tellago*9";
            var index = "replicaduns";
            provider.JobParameters = GetJobParameters(address, username, password, index);
            provider.JobParameters.LastCrawled = DateTime.Now;

            provider.ElasticSearch = engine;

            Assert.IsTrue(provider.Connect());
            if (provider.Connect())
                Assert.IsTrue(provider.Update());
        }

        [TestMethod]
        public void testUpdateODSReports()
        {
            ODataProvider provider = new ODataProvider();

            string address = "http://cecdvm456.citrite.net/ods/Reports";
            provider.ElasticSearch = engine;
            var username = "citrite\\t_leandrod1";
            var password = "tellago*9";
            var index = "reports";
            provider.JobParameters = GetJobParameters(address, username, password, index);
            provider.JobParameters.LastCrawled = DateTime.Now;

            provider.ElasticSearch = engine;

            Assert.IsTrue(provider.Connect());
            if (provider.Connect())
                Assert.IsTrue(provider.Update());
        }

        [TestMethod]
        public void testUpdateODSSalesforce()
        {
            ODataProvider provider = new ODataProvider();

            string address = "http://cecdvm456.citrite.net/ods/Salesforce";
            provider.ElasticSearch = engine;
            var username = "citrite\\t_leandrod1";
            var password = "tellago*9";
            var index = "salesforce";
            provider.JobParameters = GetJobParameters(address, username, password, index);
            provider.JobParameters.LastCrawled = DateTime.Now;

            provider.ElasticSearch = engine;

            Assert.IsTrue(provider.Connect());
            if (provider.Connect())
                Assert.IsTrue(provider.Update());
        }

        [TestMethod]
        public void testUpdateODSLeadMarketing()
        {
            ODataProvider provider = new ODataProvider();

            string address = "http://cecdvm456.citrite.net/ods/LeadMarketing";
            provider.ElasticSearch = engine;
            var username = "citrite\\t_leandrod1";
            var password = "tellago*9";
            var index = "leadmarketing";
            provider.JobParameters = GetJobParameters(address, username, password, index);
            provider.JobParameters.LastCrawled = DateTime.Now;

            provider.ElasticSearch = engine;

            Assert.IsTrue(provider.Connect());
            if (provider.Connect())
                Assert.IsTrue(provider.Update());
        }

        [TestMethod]
        public void testUpdateODataGeneric()
        {
            ODataProvider provider = new ODataProvider();

            string address = "http://cecdvm456.citrite.net/ods/MDMCustomer";                                            
            provider.ElasticSearch = engine;
            var username = "citrite\\t_leandrod1";
            var password = "tellago*9";
            var index = "mdmcustomer";
            provider.JobParameters = GetJobParameters(address, username, password, index);
            //provider.JobParameters.LastCrawled = DateTime.Now.AddDays(-1);
            provider.JobParameters.LastCrawled = DateTime.Now;

            provider.ElasticSearch = engine;

            Assert.IsTrue(provider.Connect());
            if (provider.Connect())
                Assert.IsTrue(provider.Update());

            address = "http://cecdvm456.citrite.net/ods/MDMPARTNER";
            index = "mdmpartner";
            provider.JobParameters = GetJobParameters(address, username, password, index);

            Assert.IsTrue(provider.Connect());
            if (provider.Connect())
                Assert.IsTrue(provider.Update());

            address = "http://cecdvm456.citrite.net/ods/MDMPARTY";
            index = "mdmparty";
            provider.JobParameters = GetJobParameters(address, username, password, index);

            Assert.IsTrue(provider.Connect());
            if (provider.Connect())
                Assert.IsTrue(provider.Update());

            address = "http://cecdvm456.citrite.net/ods/PACReportDB";
            index = "pacreportdb";
            provider.JobParameters = GetJobParameters(address, username, password, index);

            Assert.IsTrue(provider.Connect());
            if (provider.Connect())
                Assert.IsTrue(provider.Update());

            address = "http://cecdvm456.citrite.net/ods/ReplicaCADS";
            index = "replicacads";
            provider.JobParameters = GetJobParameters(address, username, password, index);

            Assert.IsTrue(provider.Connect());
            if (provider.Connect())
                Assert.IsTrue(provider.Update());

            address = "http://cecdvm456.citrite.net/ods/ReplicaDuns";
            index = "replicaduns";
            provider.JobParameters = GetJobParameters(address, username, password, index);

            Assert.IsTrue(provider.Connect());
            if (provider.Connect())
                Assert.IsTrue(provider.Update());

            address = "http://cecdvm456.citrite.net/ods/Reports";
            index = "reports";
            provider.JobParameters = GetJobParameters(address, username, password, index);

            Assert.IsTrue(provider.Connect());
            if (provider.Connect())
                Assert.IsTrue(provider.Update());

            address = "http://cecdvm456.citrite.net/ods/Salesforce";
            index = "salesforce";
            provider.JobParameters = GetJobParameters(address, username, password, index);

            Assert.IsTrue(provider.Connect());
            if (provider.Connect())
                Assert.IsTrue(provider.Update());

            address = "http://cecdvm456.citrite.net/ods/LeadMarketing";
            index = "leadmarketing";
            provider.JobParameters = GetJobParameters(address, username, password, index);

            Assert.IsTrue(provider.Connect());
            if (provider.Connect())
                Assert.IsTrue(provider.Update());

        }

        [TestMethod]
        public void testConnectToSharepointList()
        {
            ODataProvider provider = new ODataProvider();
            var address = "http://office2013.citrite.net/sites/CDM";
            var username = "citrite\\t_leandrod1";
            var password = "tellago*9";                        

            Assert.IsTrue(provider.ConnectToSharepoint(address, username, password));
           
        }

        [TestMethod]
        public void testConnectHyperion()
        {
            HyperionProvider provider = new HyperionProvider();
            var address = "hyperion://ftlqsqlcl09/hypbi";
            var username = "hypadmin";
            var password = "Hyper10n";
            var index = "hyperion";
            provider.JobParameters = GetJobParameters(address, username, password, index);

            Assert.IsTrue(provider.Connect());
        }

        [TestMethod]
        public void testHyperionUpdate()
        {
            HyperionProvider provider = new HyperionProvider();
            var address = "hyperion://ftlqsqlcl09/hypbi?webhost=qahyperion";        
            var username = "hypadmin";
            var password = "Hyper10n";
            var index = "hyperion";
            provider.JobParameters = GetJobParameters(address, username, password, index);            
            provider.ElasticSearch = engine;

            if (provider.Connect())
                provider.Update();
        }

        [TestMethod]
        public void testConnectBicoe()
        {
            BicoeProvider provider = new BicoeProvider();
            var address = "http://intranet.citrite.net/bicoe/";
            var username = "t_martinda";
            var password = "tellago*1";            
            var index = "hyperion";
            provider.JobParameters = GetJobParameters(address, username, password, index);            
            provider.ElasticSearch = engine;

            Assert.IsTrue(provider.Connect());                
        }

        [TestMethod]
        public void testBicoeUpdate()
        {
            BicoeProvider provider = new BicoeProvider();            
            //var address = "http://intranet.citrite.net/bicoe/";
            //var address = "http://office2013.citrite.net/sites/bicoe";
            var address = "https://microsoftbiqa.citrite.net/sites/bicoe";
            var username = "t_leandrod1";
            var password = "tellago*9";
            var index = "bicoe";
            provider.JobParameters = GetJobParameters(address, username, password, index);            
            provider.ElasticSearch = engine;

            if (provider.Connect())
                Assert.IsTrue(provider.Update());
        }

        [TestMethod]
        public void testBicoeUpdateWithoutUser()
        {
            BicoeProvider provider = new BicoeProvider();
            var address = "http://office2013.citrite.net/sites/bicoe";
            var index = "bicoe";
            provider.JobParameters = GetJobParameters(address, "", "", index);            

            provider.ElasticSearch = engine;

            if (provider.Connect())
                Assert.IsTrue(provider.Update());
        }

        [TestMethod]
        public void testODataDeleteLists()
        {
            ODataProvider provider = new ODataProvider();
            var address = "https://microsoftbiqa.citrite.net/sites/CDM";
            var username = "citrite\\t_leandrod1";
            var password = "tellago*9"; 
            //var list = "ODS-Databases";
            //var list = "ODS-Columns";
            var list = "ODS-Tables";
            provider.DeleteSPLists(address, username, password, list);
        }

        [TestMethod]
        public void testCitropediaUpdate()
        {
            CitropediaProvider provider = new CitropediaProvider();
            //var address = "http://sharepoint.citrite.net/sites/it/ea/DMO/Citropedia";
            var address = "http://sharepoint.citrite.net/sites/it/ea/DMO/Citropedia/?list=BI%20Terms";
            var username = "t_leandrod1";
            var password = "tellago*9";
            var index = "citropedia";
            provider.JobParameters = GetJobParameters(address, username, password, index);
            provider.ElasticSearch = engine;

            provider.Connect();            
            
            Assert.IsTrue(provider.Update());
        }

        [TestMethod]
        public void testCitropediaUpdateWithoutUser()
        {
            CitropediaProvider provider = new CitropediaProvider();
            var address = "http://sharepoint.citrite.net/sites/it/ea/DMO/Citropedia/?list=BI%20Terms";
            var index = "citropedia";
            provider.JobParameters = GetJobParameters(address, "", "", index);
            provider.ElasticSearch = engine;

            provider.Connect();                        
            Assert.IsTrue(provider.Update());
        }
       
        [TestMethod]
        public void testConnectCitropedia()
        {
            CitropediaProvider provider = new CitropediaProvider();
            //var address = "http://sharepoint.citrite.net/sites/it/ea/DMO/Citropedia";
            var address = "http://sharepoint.citrite.net/sites/it/ea/DMO/Citropedia/?list=BI%20Terms";
            var username = "t_leandrod1";
            var password = "tellago*9";
            var index = "citropedia";
            provider.JobParameters = GetJobParameters(address, username, password, index);
            
            Assert.IsTrue(provider.Connect());
        }

        [TestMethod]
        public void testConnectPowerPivot()
        {
            PowerPivotProvider provider = new PowerPivotProvider();
            //var address = "http://office2013.citrite.net/sites/bi/?list=PowerPivot";
            var address = "https://microsoftbiqa.citrite.net/sites/bi/?list=PowerPivot";
            var username = "citrite\\t_leandrod1";
            var password = "tellago*9";
            var index = "bi";
            provider.JobParameters = GetJobParameters(address, username, password, index);

            Assert.IsTrue(provider.Connect());
        }

        [TestMethod]
        public void testPowerPivotUpdate()
        {
            PowerPivotProvider provider = new PowerPivotProvider();
            //var address = "http://office2013.citrite.net/sites/bi/?list=PowerPivot";
            var address = "https://microsoftbiqa.citrite.net/sites/bi/?list=PowerPivot";
            var username = "citrite\\t_leandrod1";
            var password = "tellago*9";
            var index = "bi";
            provider.JobParameters = GetJobParameters(address, username, password, index);
            provider.ElasticSearch = engine;

            provider.Connect();

            Assert.IsTrue(provider.Update());
        }

        private IQueryable<SourceType> GetSourceTypes(CDMEntities cdmContext)
        {
            return (from sourcesTypes in cdmContext.SourceTypes
                    select sourcesTypes);
        }
        private IQueryable<Source> GetSources(CDMEntities cdmContext)
        {
            return (from sources in cdmContext.Sources
                    select sources);
        }

        private JobParameters GetJobParameters(String address, String username, String password, String index)
        {
            //Set Job Parameters to Provider 
            JobParameters jobParameters = new JobParameters();
            jobParameters.Address = address;
            jobParameters.Username = username;
            jobParameters.Password = password;
            jobParameters.Index = index;            
            jobParameters.StartCrawled = DateTime.Now;

            return jobParameters;
        }
    }
}
Â© 2018 GitHub, Inc.
Terms
Privacy
Security
Status
Help
Contact GitHub
API
Training
Shop
Blog
About
Press h to open a hovercard with more details.
